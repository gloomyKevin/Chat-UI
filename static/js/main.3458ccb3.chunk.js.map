{"version":3,"sources":["Button.jsx","useColorSwitch.js","App.jsx","serviceWorker.js","index.js","theme.js"],"names":["Button","onClick","label","children","useState","require","useColorSwitch","color1","color2","color","setColor","handleButtonClick","App","handleClick1","handleClick2","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","primaryColor","green","gray","red","normal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAceA,MAZf,YAA+C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAE9B,OACI,6BACI,yBAAKF,QAASA,GACV,gCAASC,GAAgBC,KCPjCC,G,MAAaC,EAAQ,GAArBD,UAYOE,MAVf,WAAiE,IAAzCC,EAAwC,uDAA/B,UAAWC,EAAoB,uDAAX,UAAW,EAClCJ,EAASG,GADyB,mBACrDE,EADqD,KAC9CC,EAD8C,KAGtDC,EAAoB,WACtBD,EAASF,IAGb,MAAO,CAACC,EAAOE,ICuBJC,MA1Bf,WAAe,MAOiBN,IAPjB,mBAONG,EAPM,KAOCI,EAPD,OAakBP,EAAe,UAAW,WAb5C,mBAaNE,EAbM,KAaEM,EAbF,KAeb,OACE,6BACE,kBAAC,EAAD,CAAQZ,MAAM,eAAKD,QAASY,IAC5B,uBAAGE,MAAO,CAAEN,UAAZ,wCACA,kBAAC,EAAD,CAAQP,MAAM,eAAKD,QAASa,IAC5B,uBAAGC,MAAO,CAAEN,MAAOD,IAAnB,gDCdcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,MCnBJ,CACXC,aAAc,UACdC,MAAO,UACPC,KAAM,wBACNC,IAAK,UACLC,OAAQ,WDeN,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3458ccb3.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Button({ onClick, label, children }) {\r\n\r\n    return (\r\n        <div>\r\n            <div onClick={onClick}>\r\n                <button>{label}</button>{children}\r\n            </div>\r\n            {/* <button>{label}</button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button","const { useState } = require(\"react\");\r\n\r\nfunction useColorSwitch(color1 = \"#ff0000\", color2 = \"#00ff00\") {\r\n    const [color, setColor] = useState(color1);\r\n\r\n    const handleButtonClick = () => {\r\n        setColor(color2);\r\n    }\r\n\r\n    return [color, handleButtonClick];\r\n}\r\n\r\nexport default useColorSwitch;","import React, { useState } from 'react';\r\nimport Button from './Button.jsx'\r\nimport './App.css';\r\nimport useColorSwitch from './useColorSwitch.js';\r\n\r\n// use hook\r\nfunction App() {\r\n  // const [color, setColor] = useState(\"#ff0000\");\r\n\r\n  // const handleClick1 = () => {\r\n  //   // alert(\"1\");\r\n  //   // setColor(\"#00ff00\");\r\n  // };\r\n  const [color, handleClick1] = useColorSwitch();\r\n\r\n  // const handleClick2 = () => {\r\n  //   alert(\"2\");\r\n  // };\r\n\r\n  const [color2, handleClick2] = useColorSwitch(\"#0000ff\", \"#ff00ff\");\r\n\r\n  return (\r\n    <div>\r\n      <Button label=\"按钮\" onClick={handleClick1} />\r\n      <p style={{ color }}>这是一段文本</p>\r\n      <Button label=\"点我\" onClick={handleClick2} />\r\n      <p style={{ color: color2 }}>这是第二段文本</p>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport theme from './theme';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <ThemeProvider theme={theme}>\r\n//       <App />\r\n//     </ThemeProvider>\r\n\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export default {\r\n    primaryColor: \"#4F9DDE\",\r\n    green: \"#34D859\",\r\n    gray: \"rgba(24, 28, 47, 0.2)\",\r\n    red: \"#F34848\",\r\n    normal: \"1.4rem\"\r\n}\r\n"],"sourceRoot":""}