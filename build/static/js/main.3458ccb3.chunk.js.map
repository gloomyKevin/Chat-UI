{"version":3,"sources":["Button.jsx","useColorSwitch.js","App.jsx","serviceWorker.js","index.js","theme.js"],"names":["Button","onClick","label","children","useState","require","useColorSwitch","color1","color2","color","setColor","handleButtonClick","App","handleClick1","handleClick2","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","primaryColor","green","gray","red","normal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAceA,MAZf,YAA+C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAE9B,OACI,6BACI,yBAAKF,QAASA,GACV,gCAASC,GAAgBC,KCPjCC,G,MAAaC,EAAQ,GAArBD,UAYOE,MAVf,WAAiE,IAAzCC,EAAwC,uDAA/B,UAAWC,EAAoB,uDAAX,UAAW,EAClCJ,EAASG,GADyB,mBACrDE,EADqD,KAC9CC,EAD8C,KAGtDC,EAAoB,WACtBD,EAASF,IAGb,MAAO,CAACC,EAAOE,ICuBJC,MA1Bf,WAAe,MAOiBN,IAPjB,mBAONG,EAPM,KAOCI,EAPD,OAakBP,EAAe,UAAW,WAb5C,mBAaNE,EAbM,KAaEM,EAbF,KAeb,OACE,6BACE,kBAAC,EAAD,CAAQZ,MAAM,eAAKD,QAASY,IAC5B,uBAAGE,MAAO,CAAEN,UAAZ,wCACA,kBAAC,EAAD,CAAQP,MAAM,eAAKD,QAASa,IAC5B,uBAAGC,MAAO,CAAEN,MAAOD,IAAnB,gDCdcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,MCnBJ,CACXC,aAAc,UACdC,MAAO,UACPC,KAAM,wBACNC,IAAK,UACLC,OAAQ,WDeN,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3458ccb3.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Button({ onClick, label, children }) {\n\n    return (\n        <div>\n            <div onClick={onClick}>\n                <button>{label}</button>{children}\n            </div>\n            {/* <button>{label}</button> */}\n        </div>\n    )\n}\n\nexport default Button","const { useState } = require(\"react\");\n\nfunction useColorSwitch(color1 = \"#ff0000\", color2 = \"#00ff00\") {\n    const [color, setColor] = useState(color1);\n\n    const handleButtonClick = () => {\n        setColor(color2);\n    }\n\n    return [color, handleButtonClick];\n}\n\nexport default useColorSwitch;","import React, { useState } from 'react';\nimport Button from './Button.jsx'\nimport './App.css';\nimport useColorSwitch from './useColorSwitch.js';\n\n// use hook\nfunction App() {\n  // const [color, setColor] = useState(\"#ff0000\");\n\n  // const handleClick1 = () => {\n  //   // alert(\"1\");\n  //   // setColor(\"#00ff00\");\n  // };\n  const [color, handleClick1] = useColorSwitch();\n\n  // const handleClick2 = () => {\n  //   alert(\"2\");\n  // };\n\n  const [color2, handleClick2] = useColorSwitch(\"#0000ff\", \"#ff00ff\");\n\n  return (\n    <div>\n      <Button label=\"按钮\" onClick={handleClick1} />\n      <p style={{ color }}>这是一段文本</p>\n      <Button label=\"点我\" onClick={handleClick2} />\n      <p style={{ color: color2 }}>这是第二段文本</p>\n    </div>\n  );\n\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <ThemeProvider theme={theme}>\n//       <App />\n//     </ThemeProvider>\n\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n    primaryColor: \"#4F9DDE\",\n    green: \"#34D859\",\n    gray: \"rgba(24, 28, 47, 0.2)\",\n    red: \"#F34848\",\n    normal: \"1.4rem\"\n}\n"],"sourceRoot":""}